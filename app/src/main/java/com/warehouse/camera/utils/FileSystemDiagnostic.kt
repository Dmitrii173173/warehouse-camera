package com.warehouse.camera.utils

import android.content.Context
import android.os.Build
import android.os.Environment
import android.util.Log
import java.io.File
import java.io.FileOutputStream
import android.Manifest
import android.content.pm.PackageManager
import androidx.core.content.ContextCompat

class FileSystemDiagnostic(private val context: Context) {
    
    private val TAG = "FileSystemDiagnostic"
    
    /**
     * –ü–æ–ª–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º–µ
     */
    fun runFullDiagnostic(): DiagnosticResult {
        val result = DiagnosticResult()
        
        Log.d(TAG, "=== –ù–ê–ß–ê–õ–û –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò –§–ê–ô–õ–û–í–û–ô –°–ò–°–¢–ï–ú–´ ===")
        
        // 1. –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ
        result.deviceInfo = getDeviceInfo()
        Log.d(TAG, "–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: ${result.deviceInfo}")
        
        // 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π
        result.permissions = checkPermissions()
        Log.d(TAG, "–†–∞–∑—Ä–µ—à–µ–Ω–∏—è: ${result.permissions}")
        
        // 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—É—Ç–µ–π
        result.availablePaths = checkAvailablePaths()
        Log.d(TAG, "–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø—É—Ç–∏: ${result.availablePaths}")
        
        // 4. –¢–µ—Å—Ç –∑–∞–ø–∏—Å–∏ –≤ —Ä–∞–∑–Ω—ã–µ –ª–æ–∫–∞—Ü–∏–∏
        result.writeTests = performWriteTests()
        Log.d(TAG, "–¢–µ—Å—Ç—ã –∑–∞–ø–∏—Å–∏: ${result.writeTests}")
        
        // 5. –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        result.recommendations = generateRecommendations(result)
        
        Log.d(TAG, "=== –ö–û–ù–ï–¶ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò ===")
        result.recommendations.forEach { Log.d(TAG, it) }
        
        return result
    }
    
    private fun getDeviceInfo(): DeviceInfo {
        return DeviceInfo(
            androidVersion = Build.VERSION.RELEASE,
            apiLevel = Build.VERSION.SDK_INT,
            manufacturer = Build.MANUFACTURER,
            model = Build.MODEL,
            hasExternalStorage = Environment.getExternalStorageState() == Environment.MEDIA_MOUNTED,
            isScopedStorageEnforced = Build.VERSION.SDK_INT >= Build.VERSION_CODES.Q
        )
    }
    
    private fun checkPermissions(): PermissionStatus {
        val hasCamera = ContextCompat.checkSelfPermission(
            context, Manifest.permission.CAMERA
        ) == PackageManager.PERMISSION_GRANTED
        
        val hasStorage = if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.TIRAMISU) {
            // Android 13+ - –Ω—É–∂–Ω—ã —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –¥–ª—è –º–µ–¥–∏–∞
            ContextCompat.checkSelfPermission(
                context, Manifest.permission.READ_MEDIA_IMAGES
            ) == PackageManager.PERMISSION_GRANTED
        } else if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.Q) {
            // Android 10-12 - –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ä—ã–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è, –Ω–æ –º–æ–≥—É—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞—Ç—å
            ContextCompat.checkSelfPermission(
                context, Manifest.permission.WRITE_EXTERNAL_STORAGE
            ) == PackageManager.PERMISSION_GRANTED
        } else {
            ContextCompat.checkSelfPermission(
                context, Manifest.permission.WRITE_EXTERNAL_STORAGE
            ) == PackageManager.PERMISSION_GRANTED
        }
        
        val hasManageStorage = if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.R) {
            Environment.isExternalStorageManager()
        } else {
            true // –ù–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è –¥–ª—è —Å—Ç–∞—Ä—ã—Ö –≤–µ—Ä—Å–∏–π
        }
        
        return PermissionStatus(hasCamera, hasStorage, hasManageStorage)
    }
    
    private fun checkAvailablePaths(): List<PathInfo> {
        val paths = mutableListOf<PathInfo>()
        
        // 1. –ü—Ä–∏–≤–∞—Ç–Ω–∞—è –ø–∞–ø–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è (–≤—Å–µ–≥–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞)
        val privateDir = File(context.getExternalFilesDir(Environment.DIRECTORY_PICTURES), "warehouse")
        paths.add(PathInfo(
            path = privateDir.absolutePath,
            type = "Private App Directory",
            exists = privateDir.exists() || privateDir.mkdirs(),
            writable = privateDir.canWrite(),
            recommended = true
        ))
        
        // 2. DCIM –ø–∞–ø–∫–∞ (–º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –Ω–∞ –Ω–æ–≤—ã—Ö Android)
        if (Build.VERSION.SDK_INT < Build.VERSION_CODES.Q) {
            val dcimDir = File(Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_DCIM), "warehouse")
            paths.add(PathInfo(
                path = dcimDir.absolutePath,
                type = "DCIM Public Directory",
                exists = dcimDir.exists() || tryCreateDirectory(dcimDir),
                writable = dcimDir.canWrite(),
                recommended = false
            ))
        }
        
        // 3. Pictures –ø–∞–ø–∫–∞
        val picturesDir = File(Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_PICTURES), "warehouse")
        paths.add(PathInfo(
            path = picturesDir.absolutePath,
            type = "Pictures Public Directory", 
            exists = picturesDir.exists() || tryCreateDirectory(picturesDir),
            writable = picturesDir.canWrite(),
            recommended = Build.VERSION.SDK_INT < Build.VERSION_CODES.Q
        ))
        
        return paths
    }
    
    private fun tryCreateDirectory(dir: File): Boolean {
        return try {
            dir.mkdirs()
        } catch (e: Exception) {
            Log.w(TAG, "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é ${dir.absolutePath}: ${e.message}")
            false
        }
    }
    
    private fun performWriteTests(): List<WriteTestResult> {
        val results = mutableListOf<WriteTestResult>()
        val testContent = "Test file content - ${System.currentTimeMillis()}"
        
        checkAvailablePaths().forEach { pathInfo ->
            val testFile = File(pathInfo.path, "test_file.txt")
            val testResult = try {
                // –ü–æ–ø—ã—Ç–∫–∞ —Å–æ–∑–¥–∞—Ç—å –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
                testFile.parentFile?.mkdirs()
                
                // –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–ø–∏—Å–∏ —Ñ–∞–π–ª–∞
                FileOutputStream(testFile).use { fos ->
                    fos.write(testContent.toByteArray())
                }
                
                // –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ —Ñ–∞–π–ª —Å–æ–∑–¥–∞–ª—Å—è –∏ —á–∏—Ç–∞–µ—Ç—Å—è
                val readContent = testFile.readText()
                val success = readContent == testContent
                
                // –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª
                testFile.delete()
                
                WriteTestResult(pathInfo.path, success, null)
            } catch (e: Exception) {
                WriteTestResult(pathInfo.path, false, e.message)
            }
            
            results.add(testResult)
        }
        
        return results
    }
    
    private fun generateRecommendations(result: DiagnosticResult): List<String> {
        val recommendations = mutableListOf<String>()
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π
        if (!result.permissions.hasStorage) {
            recommendations.add("‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ –¥–æ—Å—Ç—É–ø –∫ —Ö—Ä–∞–Ω–∏–ª–∏—â—É - –∑–∞–ø—Ä–æ—Å–∏—Ç—å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è")
        }
        
        if (result.deviceInfo.apiLevel >= Build.VERSION_CODES.R && !result.permissions.hasManageStorage) {
            recommendations.add("‚ö†Ô∏è –î–ª—è Android 11+ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∑–∞–ø—Ä–æ—Å–∏—Ç—å MANAGE_EXTERNAL_STORAGE")
        }
        
        // –ê–Ω–∞–ª–∏–∑ —Ç–µ—Å—Ç–æ–≤ –∑–∞–ø–∏—Å–∏
        val successfulPaths = result.writeTests.filter { it.success }
        if (successfulPaths.isEmpty()) {
            recommendations.add("‚ùå –ö–†–ò–¢–ò–ß–ù–û: –ù–∏ –æ–¥–∏–Ω –ø—É—Ç—å –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –∑–∞–ø–∏—Å–∏!")
            recommendations.add("üîß –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å MediaStore API –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–∞–π–ª–æ–≤")
        } else {
            val privatePath = successfulPaths.find { it.path.contains("Android/data") }
            if (privatePath != null) {
                recommendations.add("‚úÖ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä–∏–≤–∞—Ç–Ω—É—é –ø–∞–ø–∫—É –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: ${privatePath.path}")
            }
        }
        
        // –°–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤—É
        when {
            result.deviceInfo.manufacturer.contains("Xiaomi", ignoreCase = true) -> {
                recommendations.add("üì± Xiaomi: –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π –≤ MIUI Security")
            }
            result.deviceInfo.manufacturer.contains("Huawei", ignoreCase = true) -> {
                recommendations.add("üì± Huawei: –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π –≤ Phone Manager")
            }
            result.deviceInfo.manufacturer.contains("Samsung", ignoreCase = true) -> {
                recommendations.add("üì± Samsung: –£–±–µ–¥–∏—Ç—å—Å—è —á—Ç–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–µ –≤ —Ä–µ–∂–∏–º–µ —ç–Ω–µ—Ä–≥–æ—Å–±–µ—Ä–µ–∂–µ–Ω–∏—è")
            }
            result.deviceInfo.manufacturer.contains("Oppo", ignoreCase = true) ||
            result.deviceInfo.manufacturer.contains("OnePlus", ignoreCase = true) -> {
                recommendations.add("üì± Oppo/OnePlus: –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫ –∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏")
            }
        }
        
        // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –≤–µ—Ä—Å–∏–∏ Android
        if (result.deviceInfo.apiLevel >= Build.VERSION_CODES.Q) {
            recommendations.add("‚ö†Ô∏è Android 10+: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Scoped Storage –∏–ª–∏ MediaStore API")
        }
        
        return recommendations
    }
    
    /**
     * –ü–æ–ª—É—á–∏—Ç—å –ª—É—á—à–∏–π –ø—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤ –Ω–∞ —Ç–µ–∫—É—â–µ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ
     */
    fun getBestSavePath(): String {
        val diagnostic = runFullDiagnostic()
        val workingPaths = diagnostic.writeTests.filter { it.success }
        
        return if (workingPaths.isNotEmpty()) {
            // –ü—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–µ –æ—Ç–¥–∞–µ–º –ø—Ä–∏–≤–∞—Ç–Ω–æ–π –ø–∞–ø–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
            workingPaths.find { it.path.contains("Android/data") }?.path 
                ?: workingPaths.first().path
        } else {
            // Fallback –Ω–∞ –ø—Ä–∏–≤–∞—Ç–Ω—É—é –ø–∞–ø–∫—É –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
            File(context.getExternalFilesDir(Environment.DIRECTORY_PICTURES), "warehouse").absolutePath
        }
    }
}

// –î–∞—Ç–∞-–∫–ª–∞—Å—Å—ã –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
data class DiagnosticResult(
    var deviceInfo: DeviceInfo = DeviceInfo(),
    var permissions: PermissionStatus = PermissionStatus(),
    var availablePaths: List<PathInfo> = emptyList(),
    var writeTests: List<WriteTestResult> = emptyList(),
    var recommendations: List<String> = emptyList()
)

data class DeviceInfo(
    val androidVersion: String = "",
    val apiLevel: Int = 0,
    val manufacturer: String = "",
    val model: String = "",
    val hasExternalStorage: Boolean = false,
    val isScopedStorageEnforced: Boolean = false
) {
    override fun toString(): String {
        return "$manufacturer $model, Android $androidVersion (API $apiLevel), " +
                "External: $hasExternalStorage, Scoped: $isScopedStorageEnforced"
    }
}

data class PermissionStatus(
    val hasCamera: Boolean = false,
    val hasStorage: Boolean = false,
    val hasManageStorage: Boolean = false
) {
    override fun toString(): String {
        return "Camera: $hasCamera, Storage: $hasStorage, ManageStorage: $hasManageStorage"
    }
}

data class PathInfo(
    val path: String,
    val type: String,
    val exists: Boolean,
    val writable: Boolean,
    val recommended: Boolean = false
) {
    override fun toString(): String {
        return "$type: $path (exists: $exists, writable: $writable, recommended: $recommended)"
    }
}

data class WriteTestResult(
    val path: String,
    val success: Boolean,
    val error: String?
) {
    override fun toString(): String {
        return if (success) {
            "‚úÖ $path - SUCCESS"
        } else {
            "‚ùå $path - FAILED: $error"
        }
    }
}
