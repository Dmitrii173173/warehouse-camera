package com.warehouse.camera.activity

import android.Manifest
import android.content.pm.PackageManager
import android.os.Bundle
import android.os.Environment
import android.util.Log
import android.widget.Button
import android.widget.TextView
import androidx.appcompat.app.AppCompatActivity
import androidx.core.app.ActivityCompat
import androidx.core.content.ContextCompat
import com.warehouse.camera.R
import com.warehouse.camera.utils.FileSystemDiagnostic
import com.warehouse.camera.utils.FileUtils

/**
 * –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –ø—Ä–æ–±–ª–µ–º —Å —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º–æ–π
 * –î–æ–±–∞–≤–ª–µ–Ω–∞ –≤ AndroidManifest.xml –∫–∞–∫ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
 */
class DiagnosticActivity : AppCompatActivity() {
    
    private lateinit var diagnosticText: TextView
    private val diagnostic by lazy { FileSystemDiagnostic(this) }
    
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_diagnostic)
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è views
        diagnosticText = findViewById(R.id.tv_diagnostic_output)
        
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–Ω–æ–ø–æ–∫
        findViewById<Button>(R.id.btn_run_diagnostic).setOnClickListener { runFullDiagnostic() }
        findViewById<Button>(R.id.btn_test_save).setOnClickListener { testFileSave() }
        findViewById<Button>(R.id.btn_clear_log).setOnClickListener { clearLog() }
        
        // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è
        requestPermissions()
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        appendToLog("üîß –î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∞—è —É—Ç–∏–ª–∏—Ç–∞ —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã")
        appendToLog("–î–ª—è –Ω–∞—á–∞–ª–∞ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –∏–ª–∏ —Ç–µ—Å—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è.\n")
    }
    
    private fun clearLog() {
        runOnUiThread {
            diagnosticText.text = "üîß –î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∞—è —É—Ç–∏–ª–∏—Ç–∞ —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã\n–î–ª—è –Ω–∞—á–∞–ª–∞ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –∏–ª–∏ —Ç–µ—Å—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è.\n"
        }
    }
    
    private fun requestPermissions() {
        val permissions = mutableListOf<String>()
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∫–∏–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –Ω—É–∂–Ω—ã
        if (ContextCompat.checkSelfPermission(this, Manifest.permission.CAMERA) != PackageManager.PERMISSION_GRANTED) {
            permissions.add(Manifest.permission.CAMERA)
        }
        
        if (android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.TIRAMISU) {
            if (ContextCompat.checkSelfPermission(this, Manifest.permission.READ_MEDIA_IMAGES) != PackageManager.PERMISSION_GRANTED) {
                permissions.add(Manifest.permission.READ_MEDIA_IMAGES)
            }
        } else {
            if (ContextCompat.checkSelfPermission(this, Manifest.permission.WRITE_EXTERNAL_STORAGE) != PackageManager.PERMISSION_GRANTED) {
                permissions.add(Manifest.permission.WRITE_EXTERNAL_STORAGE)
            }
        }
        
        if (android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.R) {
            if (!Environment.isExternalStorageManager()) {
                appendToLog("‚ö†Ô∏è –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ MANAGE_EXTERNAL_STORAGE")
            }
        }
        
        if (permissions.isNotEmpty()) {
            ActivityCompat.requestPermissions(this, permissions.toTypedArray(), 1001)
        }
    }
    
    private fun runFullDiagnostic() {
        appendToLog("=== –ó–ê–ü–£–°–ö –ü–û–õ–ù–û–ô –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò ===\n")
        
        try {
            val result = diagnostic.runFullDiagnostic()
            
            // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ
            appendToLog("üì± –£–°–¢–†–û–ô–°–¢–í–û:")
            appendToLog("   ${result.deviceInfo}\n")
            
            // –†–∞–∑—Ä–µ—à–µ–Ω–∏—è
            appendToLog("üîê –†–ê–ó–†–ï–®–ï–ù–ò–Ø:")
            appendToLog("   ${result.permissions}\n")
            
            // –î–æ—Å—Ç—É–ø–Ω—ã–µ –ø—É—Ç–∏
            appendToLog("üìÅ –î–û–°–¢–£–ü–ù–´–ï –ü–£–¢–ò:")
            result.availablePaths.forEach { pathInfo ->
                val status = if (pathInfo.writable) "‚úÖ" else "‚ùå"
                appendToLog("   $status ${pathInfo.type}")
                appendToLog("      ${pathInfo.path}")
                appendToLog("      Exists: ${pathInfo.exists}, Writable: ${pathInfo.writable}")
            }
            appendToLog("")
            
            // –¢–µ—Å—Ç—ã –∑–∞–ø–∏—Å–∏
            appendToLog("‚úèÔ∏è –¢–ï–°–¢–´ –ó–ê–ü–ò–°–ò:")
            result.writeTests.forEach { testResult ->
                appendToLog("   ${testResult}")
            }
            appendToLog("")
            
            // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
            appendToLog("üí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
            result.recommendations.forEach { recommendation ->
                appendToLog("   $recommendation")
            }
            appendToLog("")
            
            // –õ—É—á—à–∏–π –ø—É—Ç—å
            val bestPath = diagnostic.getBestSavePath()
            appendToLog("üéØ –†–ï–ö–û–ú–ï–ù–î–£–ï–ú–´–ô –ü–£–¢–¨:")
            appendToLog("   $bestPath")
            
        } catch (e: Exception) {
            appendToLog("‚ùå –û–®–ò–ë–ö–ê –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò: ${e.message}")
            Log.e("DiagnosticActivity", "Diagnostic error", e)
        }
    }
    
    private fun testFileSave() {
        appendToLog("\n=== –¢–ï–°–¢ –°–û–•–†–ê–ù–ï–ù–ò–Ø –§–ê–ô–õ–ê ===")
        
        try {
            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è FileUtils
            FileUtils.initialize(this)
            
            // –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
            val testContent = """
                –¢–ï–°–¢ –°–û–•–†–ê–ù–ï–ù–ò–Ø –§–ê–ô–õ–ê
                =====================
                –í—Ä–µ–º—è: ${java.text.SimpleDateFormat("yyyy-MM-dd HH:mm:ss").format(java.util.Date())}
                –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: ${android.os.Build.MANUFACTURER} ${android.os.Build.MODEL}
                Android: ${android.os.Build.VERSION.RELEASE} (API ${android.os.Build.VERSION.SDK_INT})
                
                –≠—Ç–æ—Ç —Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è.
                –ï—Å–ª–∏ –≤—ã –≤–∏–¥–∏—Ç–µ —ç—Ç–æ—Ç —Ç–µ–∫—Å—Ç - —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!
            """.trimIndent()
            
            // –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
            val testResults = mutableListOf<Pair<String, Boolean>>()
            
            // –¢–µ—Å—Ç 1: –ë–∞–∑–æ–≤–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
            try {
                val baseDir = FileUtils.getBaseDirectory(this)
                val testFile1 = java.io.File(baseDir, "test_file_1.txt")
                testFile1.writeText(testContent)
                val success1 = testFile1.exists() && testFile1.length() > 0
                testResults.add("Base Directory" to success1)
                if (success1) {
                    appendToLog("‚úÖ –¢–µ—Å—Ç 1 (Base Directory): –£–°–ü–ï–•")
                    appendToLog("   –ü—É—Ç—å: ${testFile1.absolutePath}")
                    testFile1.delete() // –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª
                } else {
                    appendToLog("‚ùå –¢–µ—Å—Ç 1 (Base Directory): –ù–ï–£–î–ê–ß–ê")
                }
            } catch (e: Exception) {
                appendToLog("‚ùå –¢–µ—Å—Ç 1 (Base Directory): –û–®–ò–ë–ö–ê - ${e.message}")
                testResults.add("Base Directory" to false)
            }
            
            // –¢–µ—Å—Ç 2: –ü—Ä–∏–≤–∞—Ç–Ω–∞—è –ø–∞–ø–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
            try {
                val privateDir = getExternalFilesDir(null) ?: filesDir
                val testFile2 = java.io.File(privateDir, "test_file_2.txt")
                testFile2.writeText(testContent)
                val success2 = testFile2.exists() && testFile2.length() > 0
                testResults.add("Private Directory" to success2)
                if (success2) {
                    appendToLog("‚úÖ –¢–µ—Å—Ç 2 (Private Directory): –£–°–ü–ï–•")
                    appendToLog("   –ü—É—Ç—å: ${testFile2.absolutePath}")
                    testFile2.delete()
                } else {
                    appendToLog("‚ùå –¢–µ—Å—Ç 2 (Private Directory): –ù–ï–£–î–ê–ß–ê")
                }
            } catch (e: Exception) {
                appendToLog("‚ùå –¢–µ—Å—Ç 2 (Private Directory): –û–®–ò–ë–ö–ê - ${e.message}")
                testResults.add("Private Directory" to false)
            }
            
            // –¢–µ—Å—Ç 3: MediaStore (—Ç–æ–ª—å–∫–æ Android 10+)
            if (android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.Q) {
                try {
                    val resolver = contentResolver
                    val contentValues = android.content.ContentValues().apply {
                        put(android.provider.MediaStore.MediaColumns.DISPLAY_NAME, "test_file_3.txt")
                        put(android.provider.MediaStore.MediaColumns.MIME_TYPE, "text/plain")
                        put(android.provider.MediaStore.MediaColumns.RELATIVE_PATH, "Documents/warehouse_test")
                    }
                    
                    val uri = resolver.insert(android.provider.MediaStore.Files.getContentUri("external"), contentValues)
                    if (uri != null) {
                        resolver.openOutputStream(uri)?.use { outputStream ->
                            outputStream.write(testContent.toByteArray())
                        }
                        appendToLog("‚úÖ –¢–µ—Å—Ç 3 (MediaStore): –£–°–ü–ï–•")
                        appendToLog("   URI: $uri")
                        
                        // –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª
                        resolver.delete(uri, null, null)
                        testResults.add("MediaStore" to true)
                    } else {
                        appendToLog("‚ùå –¢–µ—Å—Ç 3 (MediaStore): –ù–ï–£–î–ê–ß–ê - –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å URI")
                        testResults.add("MediaStore" to false)
                    }
                } catch (e: Exception) {
                    appendToLog("‚ùå –¢–µ—Å—Ç 3 (MediaStore): –û–®–ò–ë–ö–ê - ${e.message}")
                    testResults.add("MediaStore" to false)
                }
            } else {
                appendToLog("‚ö†Ô∏è –¢–µ—Å—Ç 3 (MediaStore): –ü–†–û–ü–£–©–ï–ù - Android –≤–µ—Ä—Å–∏—è < 10")
                testResults.add("MediaStore" to false)
            }
            
            // –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            val successCount = testResults.count { it.second }
            val totalCount = testResults.size
            
            appendToLog("\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–û–í:")
            appendToLog("   –£—Å–ø–µ—à–Ω—ã—Ö: $successCount –∏–∑ $totalCount")
            
            if (successCount > 0) {
                appendToLog("‚úÖ –ö–∞–∫ –º–∏–Ω–∏–º—É–º –æ–¥–∏–Ω –º–µ—Ç–æ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç!")
                appendToLog("   –ü—Ä–æ–±–ª–µ–º–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º –∫–æ–¥–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.")
            } else {
                appendToLog("‚ùå –ù–ò –û–î–ò–ù –º–µ—Ç–æ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç!")
                appendToLog("   –ü—Ä–æ–±–ª–µ–º–∞ —Å–≤—è–∑–∞–Ω–∞ —Å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è–º–∏ –∏–ª–∏ —Å–∏—Å—Ç–µ–º–Ω—ã–º–∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è–º–∏.")
            }
            
        } catch (e: Exception) {
            appendToLog("‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –¢–ï–°–¢–ê: ${e.message}")
            Log.e("DiagnosticActivity", "Test save error", e)
        }
    }
    
    private fun appendToLog(message: String) {
        runOnUiThread {
            val currentText = diagnosticText.text.toString()
            diagnosticText.text = currentText + message + "\n"
        }
        
        // –¢–∞–∫–∂–µ –≤—ã–≤–æ–¥–∏–º –≤ Android Log
        Log.d("DiagnosticActivity", message)
    }
    
    override fun onRequestPermissionsResult(
        requestCode: Int,
        permissions: Array<out String>,
        grantResults: IntArray
    ) {
        super.onRequestPermissionsResult(requestCode, permissions, grantResults)
        
        if (requestCode == 1001) {
            val results = permissions.zip(grantResults.toTypedArray()).map { (permission, result) ->
                val granted = result == PackageManager.PERMISSION_GRANTED
                "$permission: ${if (granted) "‚úÖ –ü–†–ï–î–û–°–¢–ê–í–õ–ï–ù–û" else "‚ùå –û–¢–ö–õ–û–ù–ï–ù–û"}"
            }
            
            appendToLog("\nüìã –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ó–ê–ü–†–û–°–ê –†–ê–ó–†–ï–®–ï–ù–ò–ô:")
            results.forEach { appendToLog("   $it") }
            appendToLog("")
        }
    }
}
